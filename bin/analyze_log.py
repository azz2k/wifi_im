#!/usr/bin/env python

import cPickle
import sys
from matplotlib import pyplot as plt
from matplotlib import rcParams
import matplotlib.gridspec as gridspec
import numpy as np
import math
import argparse
import copy
import random
import wifi_im

def plot(data, time, args):
  xyr = [point for point in data["xyr"] if point[0] < time]

  states = [state for state in data["state_log"] if state[0] < time]
  fit_model = [state for state in states if state[1] == "fit_model"]

  if args.model:
    xx = np.linspace(-10, 0, 20)
    yy = np.linspace(-15, 20, 70)
    rssi_plot = []
    try:
      rssi_plot = [model[1] for model in data["model_log"] if model[0] < time][-1]
    except:
      xyr_s = []
      if len(fit_model) > 0:
        xyr_s = copy.deepcopy([point for point in xyr if point[0] <= fit_model[-1][0]])
        random.shuffle(xyr_s)
      rssi_plot = np.zeros((len(xx), len(yy)))
      if len(xyr_s) > 0:
        model = wifi_im.KernelModel(wifi_im.RidgeCV())
        model.fit([point[1:3] for point in xyr_s], [point[3] for point in xyr_s])
        for i in range(len(xx)):
          for j in range(len(yy)):
          rssi_plot[i, j] = model.predict([[xx[i], yy[j]]])

  gs = gridspec.GridSpec(2, 3)
  plt.subplot(gs[:, 0])
  plt.title("hexbin")
  plt.hexbin([x for t, x, y, r in xyr], [y for t, x, y, r in xyr], [r for t, x, y, r in xyr], gridsize=20, cmap=plt.get_cmap("gnuplot2"), vmin=-80, vmax=-20, extent=(-10, 0, -15, 20))
  plt.plot([x for t, x, y, r in xyr], [y for t, x, y, r in xyr], color="#39FF14")
  plt.gca().set_xlim((-10, 0))
  plt.gca().set_xlabel("x [m]")
  plt.gca().set_ylim((-15, 20))
  plt.gca().set_ylabel("y [m]")
  cbar = plt.colorbar()
  cbar.set_label("mean rssi [dB]")
  if args.model:
    plt.subplot(gs[:, 1])
    plt.title("model")
    plt.pcolormesh(xx, yy, rssi_plot.T, cmap=plt.get_cmap("gnuplot2"), vmin=-80, vmax=-20)
    plt.plot([x for t, x, y, r in xyr], [y for t, x, y, r in xyr], color="#39FF14")
    plt.gca().set_xlim((-10, 0))
    plt.gca().set_xlabel("x [m]")
    plt.gca().set_ylim((-15, 20))
    plt.gca().set_ylabel("y [m]")
    cbar = plt.colorbar()
    cbar.set_label("mean rssi [dB]")
  if args.model:
    plt.subplot(gs[0, 2:])
  else:
    plt.subplot(gs[0, 1:])
  plt.title("log by time")
  plt.plot([rssi[0]-data["xyr"][0][0] for rssi in xyr], [rssi[3] for rssi in xyr], "b.")
  plt.gca().set_xlabel("time [s]")
  plt.gca().set_ylabel("rssi [dB]")
  plt.gca().set_ylim((-80, -20))
  if args.model:
    plt.subplot(gs[1, 2:])
  else:
    plt.subplot(gs[1, 1:])
  plt.title("log by distance")
  trajectory = [xyr[i][1:3] for i in range(len(xyr))]
  lengths = [math.hypot(trajectory[i][0] - trajectory[i-1][0], trajectory[i][1]-trajectory[i][1]) for i in range(1, len(trajectory))]
  dist = [0.0]
  for length in lengths:
    dist.append(dist[-1]+length)
  plt.plot(dist, [rssi[3] for rssi in xyr], "b.")
  plt.gca().set_xlabel("distance travelled [m]")
  plt.gca().set_ylabel("rssi [dB]")
  plt.gca().set_ylim((-80, -20))

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="analyze pickle files generated by wifi_im")
  parser.add_argument("-v", "--video", help="generate a video", action="store_true")
  parser.add_argument("-m", "--model", help="also show the model", action="store_true")
  parser.add_argument("filename", help="pickle file")
  
  args = parser.parse_args()
  
  data = cPickle.load(open(args.filename, "rb"))

  time_start = data["xyr"][0][0]
  time_end = data["xyr"][-1][0]
  times = [time_end]
  if args.video:
    times = np.arange(time_start+10.0, time_end, 10.0)

  rcParams["font.family"] = "serif"
  rcParams["xtick.labelsize"] = 6
  rcParams["ytick.labelsize"] = 6
  rcParams["axes.labelsize"] = 6
  rcParams["axes.titlesize"] = 6
  
  for i in range(len(times)):
    print i, "/", len(times)
    plt.clf()
    plot(data, times[i], args)
    plt.suptitle("{:.2f}".format(times[i]))
    plt.gcf().set_size_inches((12, 9))
    plt.savefig("frame"+str(i).zfill(6)+".jpg", dpi=100)
