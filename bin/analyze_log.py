#!/usr/bin/env python

import cPickle
import sys
from matplotlib import pyplot as plt
from matplotlib import rcParams
import matplotlib.gridspec as gridspec
import numpy as np
import math
import argparse

def smooth(x,window_len=11,window='hanning'):
  if type(x) == list:
    x = np.array(x)
  if x.ndim != 1:
    raise ValueError, "smooth only accepts 1 dimension arrays."
  if x.size < window_len:
    raise ValueError, "Input vector needs to be bigger than window size."
  if window_len<3:
    return x
  if not window in ['flat', 'hanning', 'hamming', 'bartlett', 'blackman']:
    raise ValueError, "Window is on of 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'"
  s=np.r_[2*x[0]-x[window_len-1::-1],x,2*x[-1]-x[-1:-window_len:-1]]
  if window == 'flat': #moving average
    w=np.ones(window_len,'d')
  else:  
    w=eval('np.'+window+'(window_len)')
    y=np.convolve(w/w.sum(),s,mode='same')
    return y[window_len:-window_len+1]

def plot(data, time):
  xyr = [point for point in data["xyr"] if point[0] < time]
  gs = gridspec.GridSpec(2, 3)
  plt.subplot(gs[:, 0])
  plt.hexbin([x for t, x, y, r in xyr], [y for t, x, y, r in xyr], [r for t, x, y, r in xyr], gridsize=20, cmap=plt.get_cmap("gnuplot2"), vmin=-80, vmax=-20, extent=(-10, 0, -15, 20))
  plt.plot([x for t, x, y, r in xyr], [y for t, x, y, r in xyr], "g-")
  plt.gca().set_xlim((-10, 0))
  plt.gca().set_xlabel("x [m]")
  plt.gca().set_ylim((-15, 20))
  plt.gca().set_ylabel("y [m]")
  cbar = plt.colorbar()
  cbar.set_label("mean rssi [dB]")
  plt.subplot(gs[0, 1:])
  plt.plot([rssi[0]-data["xyr"][0][0] for rssi in xyr], [rssi[3] for rssi in xyr], "b.")
  plt.plot([rssi[0]-data["xyr"][0][0] for rssi in xyr], smooth([rssi[3] for rssi in xyr], 100), "r-")
  plt.gca().set_xlabel("time [s]")
  plt.gca().set_ylabel("rssi [dB]")
  plt.gca().set_ylim((-80, -20))
  plt.subplot(gs[1, 1:])
  trajectory = [xyr[i][1:3] for i in range(len(xyr))]
  lengths = [math.hypot(trajectory[i][0] - trajectory[i-1][0], trajectory[i][1]-trajectory[i][1]) for i in range(1, len(trajectory))]
  dist = [0.0]
  for length in lengths:
    dist.append(dist[-1]+length)
  plt.plot(dist, [rssi[3] for rssi in xyr], "b.")
  plt.plot(dist, smooth([rssi[3] for rssi in xyr], 100), "r-")
  plt.gca().set_xlabel("distance travelled [m]")
  plt.gca().set_ylabel("rssi [dB]")
  plt.gca().set_ylim((-80, -20))


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="analyze pickle files generated by wifi_im")
  parser.add_argument("-v", "--video", help="generate a video", action="store_true")
  parser.add_argument("filename", help="pickle file")
  
  args = parser.parse_args()
  
  data = cPickle.load(open(args.filename, "rb"))

  time_start = data["xyr"][0][0]
  time_end = data["xyr"][-1][0]
  times = [time_end]
  if args.video:
    times = np.arange(time_start+10.0, time_end, 10.0)

  rcParams["font.family"] = "serif"
  rcParams["xtick.labelsize"] = 6
  rcParams["ytick.labelsize"] = 6
  rcParams["axes.labelsize"] = 6
  rcParams["axes.titlesize"] = 6
  
  for i in range(len(times)):
    print i, "/", len(times)
    plt.clf()
    plot(data, times[i])
    plt.title("{:.2f}".format(times[i]))
    plt.gcf().set_size_inches((12, 9))
    plt.savefig("frame"+str(i).zfill(6)+".jpg", dpi=100)
