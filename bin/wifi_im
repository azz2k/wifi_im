#!/usr/bin/env python

import rospy
from nav_msgs.msg import OccupancyGrid
from nav_msgs.msg import Odometry
import numpy as np
from matplotlib import pyplot as plt
import Queue

class WifiIM:
  def __init__(self):
    rospy.init_node("wifi_im", anonymous=True)
    self.msg_queue = Queue.Queue()
    self.ogrid = np.zeros((1, 1))
    self.resolution = 0.1
    self.origin = [0, 0]
    self.pos = [0, 0]
    rospy.Subscriber("map", OccupancyGrid, self.callbackMap)
    rospy.Subscriber("odom", Odometry, self.callbackPos)
    r = rospy.Rate(1)
    plt.ion()
    plt.gcf().canvas._tkcanvas.master.geometry("1000x1200")
    while not rospy.is_shutdown():
      while not self.msg_queue.empty():
        data = self.msg_queue.get()
        if data[0] == "OccupancyGrid":
          self.ogrid = np.array(data[1].data, dtype=np.int8)
          self.ogrid = self.ogrid.reshape((data[1].info.height, data[1].info.width))
          self.resolution = data[1].info.resolution
          self.origin = [data[1].info.origin.position.x, data[1].info.origin.position.y]
        elif data[0] == "Odometry":
          self.pos = [data[1].pose.pose.position.x, data[1].pose.pose.position.y]
      print self.ogrid.shape, self.pos
      plt.clf()
      plt.imshow(self.ogrid, cmap=plt.cm.binary, origin="lower")
      plt.plot((self.pos[0] - self.origin[0])/self.resolution, (self.pos[1] - self.origin[1])/self.resolution, "r*")
      plt.gca().set_xlim((0, 3200))
      plt.gca().set_ylim((0, 4500))
      plt.draw()
      r.sleep()
  def callbackMap(self, data):
    self.msg_queue.put(["OccupancyGrid", data])
  def callbackPos(self, data):
    self.msg_queue.put(["Odometry", data])

if __name__ == "__main__":
  try:
    wifi_im = WifiIM()
  except rospy.ROSInterruptException:
    pass
